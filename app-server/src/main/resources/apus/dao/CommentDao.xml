<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="apus.dao.CommentDao">
  
  <resultMap type="Comment" id="CommentMap">
    <id column="comment_no" property="no"/> 
    <result column="content" property="content"/>
    <result column="created_dt" property="registeredDate"/>
    
    
    <association property="commenter" javaType="Member">
      <id column="member_no" property="no"/>
      <result column="id" property="id"/>
      <result column="nickname" property="nickname"/>
    </association>
    
    <association property="commentBoard" javaType="Board">
      <id column="commentBoard_no" property="no"/>
    </association>
    
    
  </resultMap>
  
  
  <select id="findAll" resultMap="CommentMap">
    select
      c.comment_no,
      c.content,
      c.created_dt,
      m.member_no,
      m.id,
      m.nickname,
      b.board_no commentBoard_no
    from
      apus_comment c
      inner join apus_member m on m.member_no=c.member_no
      inner join apus_board b on b.board_no=c.board_no
  </select>
  <!-- 해당 게시물의 전체 글 목록 -->
  <select id = "findBoardComment" resultMap ="CommentMap" parameterType="int">
    select
      c.comment_no,
      c.content,
      c.created_dt,
      m.member_no,
      m.id,
      m.nickname
    from
      apus_comment c
      inner join apus_member m on m.member_no=c.member_no
    where 
    board_no=#{no}
  </select> 
  <!--  수정할 게시물의 "댓글 하나" 만 불러옴. -->
  <select id = "findOneComment" parameterType="int">
    select
      c.comment_no,
      c.content,
      c.created_dt,
      m.member_no,
      m.id,
      m.nickname
    from
      apus_comment c
      inner join apus_member m on m.member_no=c.member_no
    where 
    board_no=#{no} and c.comment_no=#{no}
  
  </select>
  
 
  
    <insert id="insert" parameterType="comment" 
  useGeneratedKeys="true" keyColumn="comment_no" keyProperty="no">
    insert into apus_comment(content,member_no,board_no)
    values(#{content},#{commenter.no},#{commentBoard.no})
   </insert>
  
  <delete id ="delete" parameterType="int">
	  delete from apus_comment
	  where comment_no=#{no}
  </delete>
  
  <update id ="update" parameterType="Comment">
	  update apus_comment set
	  content=#{content}
 	  where 
	  comment_no=#{no}
  </update>
  
  <select id="findByNo" resultMap="CommentMap" parameterType="int">
    select
      c.comment_no,
      c.content,
      c.created_dt,
      m.member_no,
      m.id
    from
      apus_comment c
      inner join apus_member m on c.member_no=m.member_no
    where
      c.comment_no=#{no}
  </select>  
  
   <delete id ="autoDelete" parameterType="int">
    delete from apus_comment
    where board_no=#{no}
  </delete>
  
   <select id="findById" resultMap="CommentMap" parameterType="string">
    select
      c.comment_no,
      c.content,
      c.created_dt,
      m.member_no,
      m.id,
      m.nickname,
      b.board_no commentBoard_no
    from
      apus_comment c
      inner join apus_member m on m.member_no=c.member_no
      inner join apus_board b on b.board_no=c.board_no
    where
      m.id=#{id}
  </select> 
</mapper>






