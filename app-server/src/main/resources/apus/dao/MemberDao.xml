<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="apus.dao.MemberDao">
  
  <resultMap type="Member" id="MemberMap">
    <id column="member_no" property="no"/> 
    <result column="name" property="name"/>
    <result column="id" property="id"/>
    <result column="password" property="password"/>
    <result column="birth" property="birthday"/>
    <result column="email" property="email"/>
    <result column="tel" property="tel"/>
    <result column="photo" property="photo"/>
    <result column="sex" property="sex"/>
    <result column="created_dt" property="registeredDate"/>
    <result column="role" property="doctorOrNot"/>
    <result column="point" property="point"/>
    <result column="active" property="active"/>
    <result column="nickname" property="nickname"/>
    
    <association property="doctor" javaType="doctor">
      <id column="doctor_no" property="no"/>
      <result column="major" property="major"/>
      <result column="license" property="license"/>
      <result column="homepage" property="homepage"/>
      <result column="introduction" property="introduction"/>
    </association>
    
  </resultMap>
  
  
  <select id="findAll" resultMap="MemberMap">
    select
       m.member_no,
       m.name,
       m.id,
       m.password,
       m.birth,
       m.email,
       m.tel,
       m.photo,
       m.sex,
       m.created_dt,
       m.point,
       m.role,
       m.active,
       m.nickname,
       d.doctor_no,
       d.major,
       d.license,
       d.homepage,
       d.introduction
    from
      apus_member m
      left outer join apus_doctor d on m.member_no=d.doctor_no
  </select>
  
  
   <select id="findByNo" resultMap="MemberMap" parameterType ="int">
    select
       m.member_no,
       m.name,
       m.id,
       m.password,
       m.birth,
       m.email,
       m.tel,
       m.photo,
       m.sex,
       m.created_dt,
       m.point,
       m.role,
       m.active,
       m.nickname,
       d.doctor_no,
       d.major,
       d.license,
       d.homepage,
       d.introduction
    from
      apus_member m
      left outer join apus_doctor d on m.member_no=d.doctor_no
    where 
    m.member_no =#{no}
  </select>
  

  <select id="findDoctor" resultMap="MemberMap">
    select * from apus_member where role = 2;
  </select>
  
    <select id="findDoctorMajor" resultMap="MemberMap" parameterType="member">
    select * 
      from apus_member m
      left outer join apus_doctor d on m.member_no=d.doctor_no
    where
      name=#{name};
  </select>

  <select id="findMan" resultMap="MemberMap">
    select * from apus_member where role = 2 and sex = '남';
  </select>
  
  <select id="findWoman" resultMap="MemberMap">
    select * from apus_member where role = 2 and sex = '여';
  </select>
  
    <select id="check" resultMap="MemberMap" parameterType="member">
    select
      id
    from
      apus_member
    where id=#{id}
  </select>
  
  <select id="findByIdPwd" resultMap="MemberMap" parameterType="map">
   select
       m.member_no,
       m.name,
       m.id,
       m.password,
       m.birth,
       m.email,
       m.tel,
       m.photo,
       m.sex,
       m.created_dt,
       m.point,
       m.role,
       m.active,
       m.nickname,
       d.doctor_no,
       d.major,
       d.license,
       d.homepage,
       d.introduction
    from
      apus_member m
      left outer join apus_doctor d on m.member_no=d.doctor_no
    where 
      m.id=#{param1} and m.password=password(#{param2})
  </select>
  
  <insert id="insert" parameterType="member" 
  useGeneratedKeys="true" keyColumn="member_no" keyProperty="no">
    insert into apus_member(name,id,password,birth,tel,email,photo,sex,point,role,active,nickname)
    values(#{name},#{id},password(#{password}),#{birthday},#{tel},#{email},
     #{photo},#{sex},#{point},#{doctorOrNot},#{active},#{nickname})
   </insert>
   
   <insert id="insert2" parameterType="member">
   insert into apus_doctor(doctor_no,major,license,homepage,introduction)
   values(#{no},#{doctor.major},#{doctor.license},#{doctor.homepage},#{doctor.introduction})
  </insert>
   
   <!-- 멤버의 모든 정보 변경 -->
   <update id="update" parameterType="member">
    update apus_member m
     left join apus_doctor d on m.member_no=d.doctor_no set
      m.name=#{name},
      m.id=#{id},
      m.birth=#{birthday},
      m.tel=#{tel},
      m.password=password(#{password}),
      m.email=#{email},
      m.photo=#{photo},
      m.sex=#{sex},
      m.point=#{point},
      m.role=#{doctorOrNot},
      m.nickname=#{nickname},
      d.major=#{doctor.major},
      d.license=#{doctor.license},
      d.homepage=#{doctor.homepage},
      d.introduction=#{doctor.introduction}
    where
      m.member_no=#{no}
   
   </update>
   
      <!-- 멤버 정보 변경하는 일 외에는 update2를 써야
   비밀번호가 변경되지 않음!! -->
 <update id="update2" parameterType="member">
    update apus_member m
     left join apus_doctor d on m.member_no=d.doctor_no set
      m.name=#{name},
      m.id=#{id},
      m.birth=#{birthday},
      m.tel=#{tel},
      m.email=#{email},
      m.photo=#{photo},
      m.sex=#{sex},
      m.point=#{point},
      m.role=#{doctorOrNot},
      m.nickname=#{nickname},
      d.major=#{doctor.major},
      d.license=#{doctor.license},
      d.homepage=#{doctor.homepage},
      d.introduction=#{doctor.introduction}
    where
      m.member_no=#{no}
   </update>

   
   <update id ="pointUpdate"  parameterType="int">
    update apus_member set
       point=point-30
    where
     member_no=#{no} 
   </update>
  
   <update id="doctorUpdate" parameterType="member">
    update apus_member m left outer join apus_doctor d on m.member_no=d.doctor_no
      set
      m.name=#{name},
      m.id=#{id},
      m.password=password(#{password}),
      m.birth=#{birthday},
      m.tel=#{tel},
      m.email=#{email},
      m.photo=#{photo},
      m.sex=#{sex},
      m.point=#{point},
      m.role=#{doctorOrNot},
      m.nickname=#{nickname},
      d.major=#{major},
      d.license=#{license},
      d.homepage=#{homepage},
      d.introduction=#{introduction}
    where 
      m.member_no=#{no}
   </update>
   
     <update id="doctorUpdate2" parameterType="member">
    update apus_member m left outer join apus_doctor d on m.member_no=d.doctor_no
      set
      m.name=#{name},
      m.id=#{id},
      m.birth=#{birthday},
      m.tel=#{tel},
      m.email=#{email},
      m.photo=#{photo},
      m.sex=#{sex},
      m.point=#{point},
      m.role=#{doctorOrNot},
      m.nickname=#{nickname},
      d.major=#{major},
      d.license=#{license},
      d.homepage=#{homepage},
      d.introduction=#{introduction}
    where 
      m.member_no=#{no}
   </update>
    
   <update id="delete" parameterType="string">
    update apus_member set
      active = 0
    where 
      id=#{id}
   </update>
   
   <select id="findById" resultMap="MemberMap" parameterType="string">
    select
      member_no,
      name,
      id,
      password,
      birth,
      tel,
      email,
      photo,
      sex,
      created_dt,
      point,
      role,
      active,
      nickname
    from
      apus_member
    where 
      id=#{id}
   </select>
   
      
   
   <select id="findByName" resultMap="MemberMap" parameterType="string">
   select
      member_no,
      name,
      id,
      password,
      birth,
      tel,
      email,
      photo,
      sex,
      created_dt,
      point,
      role,
      active,
      nickname
    from
      apus_member
    where 
      name=#{name}
  </select>
  
  <select id="findByNickname" resultMap="MemberMap" parameterType="string">
   select
      member_no,
      name,
      id,
      password,
      birth,
      tel,
      email,
      photo,
      sex,
      created_dt,
      point,
      role,
      active,
      nickname
    from
      apus_member
    where
     nickname=#{nickname}
  </select>
  
</mapper>






